You are given a 2D matrix 'ARR' (containing either ‘0’ or ‘1’) of size 'N' x 'M', where each row is in sorted order.


Find the 0-based index of the first row with the maximum number of 1's.


Note :
If two rows have the same number of 1’s, return the row with a lower index.

If no row exists where at-least one '1' is present, return -1.

Example:
Input: ‘N’ = 3, 'M' = 3
'ARR' = 
[     [ 1,  1,  1 ],
      [ 0,  0,  1 ],
      [ 0,  0,  0 ]   ]

Output: 0

Explanation: The 0th row of the given matrix has the maximum number of ones.

#include<bits/stdc++.h>
int firstOccurence(vector<int>&v){
    int low = 0;
    int high = v.size()-1;
    int ans = -1;
    while(low <= high){
        int mid = low + (high-low)/2;
        if(v[mid] == 1){
            ans = mid;
            high = mid-1;
        }
        else{
            low = mid+1;
        }
    }
    return ans;
}
int rowWithMax1s(vector<vector<int>> &matrix, int n, int m)
{
    int maxCount = 0;
    int ans = -1;
    for(int i=0;i<matrix.size();i++){
        int first = firstOccurence(matrix[i]);
        int count;
        if(first == -1){
            count = 0;
        }
        else{
            count = matrix[i].size()-first;
        }
        if(count > maxCount){
            maxCount = count;
            ans = i;
        }
    }
    return ans;
}