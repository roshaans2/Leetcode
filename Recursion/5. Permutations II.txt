Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

class Solution {
public:
    void solve(vector<int>nums,int pos,vector<vector<int>>&ans){
        if(pos>=nums.size()){
            ans.push_back(nums);
            return;
        }
        unordered_set<int>m;
        for(int i=pos;i<nums.size();i++){
            if(m.find(nums[i]) != m.end()) continue;
            m.insert(nums[i]);
            swap(nums[i],nums[pos]);
            solve(nums,pos+1,ans);
            swap(nums[i],nums[pos]);
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>>ans;
        solve(nums,0,ans);
        return ans;
    }
};