Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

class Solution {
public:
    void solve(int i,string &s,string &temp,vector<string>&ans,unordered_map<char,string>&m){
        if(i == s.size()){
            ans.push_back(temp);
            return;
        }
        string str = m[s[i]];
        for(int j=0;j<str.size();j++){
            temp.push_back(str[j]);
            solve(i+1,s,temp,ans,m);
            temp.pop_back();
        }
    }
    vector<string> letterCombinations(string digits) {
        vector<string>ans;
        unordered_map<char,string>m;
        string temp;
        m['2'] = "abc";
        m['3'] = "def";
        m['4'] = "ghi";
        m['5'] = "jkl";
        m['6'] = "mno";
        m['7'] = "pqrs";
        m['8'] = "tuv";
        m['9'] = "wxyz";

        if(digits == ""){
            return ans;
        }

        solve(0,digits,temp,ans,m);
        return ans;
    }
};

T.C - O(3^n)