You are given an array 'nums' of ‘n’ integers.



Return all subset sums of 'nums' in a non-decreasing order.



Note:
Here subset sum means sum of all elements of a subset of 'nums'. A subset of 'nums' is an array formed by removing some (possibly zero or all) elements of 'nums'.


For example
Input: 'nums' = [1,2]

Output: 0 1 2 3

Explanation:
Following are the subset sums:
0 (by considering empty subset)
1 
2
1+2 = 3
So, subset sum are [0,1,2,3].

#include<bits/stdc++.h>

void solve(vector<int>&nums,int i,int sum,vector<int>&subset,vector<int>&ans){
	if(i == nums.size()){
		ans.push_back(sum);
		return;
	}
	if(i>nums.size()){
		return;
	}
	sum += nums[i];
	subset.push_back(nums[i]);
	solve(nums,i+1,sum,subset,ans);

	sum -= nums[i];
	subset.pop_back();
	solve(nums,i+1,sum,subset,ans);
}

vector<int> subsetSum(vector<int> &nums){
	vector<int>ans;
	vector<int>subset;
	solve(nums,0,0,subset,ans);
	sort(ans.begin(),ans.end());
	return ans;
}