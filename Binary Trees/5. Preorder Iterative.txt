Approach - 

1. Create a ans vector
2. if root is null return ans
3. Create a stack
4. push root to the stack
5. While stack is not empty
    5.1 get root using s.top()
    5.2 pop the element
    5.3 push value of root into ans
    5.4 push root's right child into stack
    5.5 push root's left child into stack
6. return ans 

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // vector<int>ans;
    // void preorder(TreeNode* root){
    //     if(root!=NULL){
    //         ans.push_back(root->val);
    //         preorderTraversal(root->left);
    //         preorderTraversal(root->right);
    //     }
    // }
    // vector<int> preorderTraversal(TreeNode* root) {
    //     preorder(root);
    //     return ans;
    // }

    vector<int> preorderTraversal(TreeNode* root) {
        vector<int>ans;
        if(root==NULL) return ans;
        stack<TreeNode*>s;
        s.push(root);
        while(!s.empty()){
            root = s.top();
            s.pop();
            ans.push_back(root->val);
            if(root->right!=NULL) s.push(root->right);
            if(root->left!=NULL) s.push(root->left);
        }
        return ans;
    }
};