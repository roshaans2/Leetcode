Approach - 

1. Create 2D ans vector
2. Create a queue
3. push root to the queue
4. While q is not empty
    4.1 Get size of queue
    4.2 Create a 1d level vector
    4.3 for loop until size of queue
        4.3.1 get node from queue using q.front()
        4.3.2 pop that node using q.pop()
        4.3.3 push left child of node into queue if present
        4.3.4 push right child of node into queue if present
        4.3.5 push node's data into level vector
    4.4 push level vector into ans vector


T.C - O(n)
S.C - O(n)


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL){
            return ans;
        }
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            vector<int>level;
            for(int i=0;i<size;i++){
                TreeNode* node = q.front();
                q.pop();
                if(node->left != NULL) q.push(node->left);
                if(node->right != NULL) q.push(node->right);
                level.push_back(node->val);
            }
            ans.push_back(level);
        }
        return ans;
    }
};